{
  "id":"a3452e5a-2ed7-4053-a22a-399c79623bf3",
  "title":"Bragi Elasticsearch Query Rust",
  "outline":"notes",
   "author":"8065309f-c04c-4a56-a7fc-529f5a35caa7",
  "content":"Notes about building a `Dockerfile` for mimirsbrunn.\n\nhttps://news.ycombinator.com/item?id=22369080\n\nContext: [Multi-stage builds](https://blog.alexellis.io/mutli-stage-docker-builds/)\n\nExample: [Docker Setup for Rust Application](https://blog.sedrik.se/posts/my-docker-setup-for-rust/)\n\nIn this [discussion](https://www.reddit.com/r/rust/comments/d4oyd1/minidockerrust_example_project_updated_to/f0fmty7/?context=1)\nwe note:\n\n[Reddit Discussion on cargo vendor](https://www.reddit.com/r/rust/comments/e6mft0/fast_rust_docker_builds_with_cargo_vendor/)\n\nThere are two things to lookout for:\n\n- Minimize the size of the docker image.\n- Reduce docker image build time using caching.\n\n> This is a good start, but the best practice when building in Docker this way is to build in\n> 2 stages. The first stage copies only Cargo.toml and Cargo.lock into a blank project and builds\n> so that the result can be cached by Docker. The second stage restores the rest of the project\n> code and builds without having to re-build dependencies. This way, as long as Cargo.toml and\n> Cargo.lock haven't changed, subsequent builds will be much faster.\n\nand also\n\n> Even better is using the experimental docker caching feature. Bit like cache: cargo on travis, it\n> means you don't have to download and recompile everything from scratch (in release mode!) each\n> time you change a dependency. Doing all that hurts a lot if your edit-compile-test cycle involves\n> Docker at all. Here's a Dockerfile I threw together recently:\n\nOne of the older and most extensive explanation of the subject of\n[caching](https://blog.mgattozzi.dev/caching-rust-docker-builds/)\n\nSo... \n\n```\nFROM rust:latest as build\n\nWORKDIR /tmp\n\n# Avoid having to install/build all dependencies by copying\n# the Cargo files and making a dummy src/main.rs\nCOPY Cargo.toml .\nCOPY Cargo.lock .\nRUN echo 'fn main() {}' > src/main.rs\nRUN cargo test\nRUN cargo build --release\n\n# We need to touch our real main.rs file or else docker will use\n# the cached one.\nCOPY . .\nRUN sudo touch src/main.rs\n\nRUN cargo test\nRUN cargo build --release\n\n# Size optimization\nRUN strip target/x86_64-unknown-linux-musl/release/hello\n\n# Start building the final image\nFROM scratch\nWORKDIR /home/rust/\nCOPY --from=builder /home/rust/target/x86_64-unknown-linux-musl/release/hello .\nENTRYPOINT ['./hello']\n```\n\n\n## Builder Pattern\n\n```\nFROM rust:latest as builder\n\nWORKDIR /tmp\n\nRUN rustup target add x86_64-unknown-linux-musl\n\nCOPY . .\n\nRUN cargo install --path .\n```\n\nExecuting\n\nwe get\n\n```\n  Installing mimirsbrunn v1.2.0 (/tmp)\n    Updating crates.io index\n    Updating git repository `https://github.com/canaltp/rs-es`\nerror: failed to compile `mimirsbrunn v1.2.0 (/tmp)`, intermediate artifacts can be found at `/tmp/target`\n\nCaused by:\n  failed to select a version for the requirement `ordered-float = '^0.0.2'`\n  candidate versions found which didn't match: 1.0.2, 1.0.1, 1.0.0, ...\n  location searched: crates.io index\nrequired by package `mimirsbrunn v1.2.0 (/tmp)`\n```",
  "tags":["elasticsearch","mimirsbrunn"],
  "image":"desert",
  "kind":"DOC",
  "genre":"TUTORIAL",
  "updatedAt":"Feb 18th, 2020"
}
